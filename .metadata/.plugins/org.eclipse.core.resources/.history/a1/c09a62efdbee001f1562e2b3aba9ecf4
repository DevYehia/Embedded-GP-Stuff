#include "Bootloader.h"

/* Global pointer to BL_Data received from UDS */
static BL_Data *g_BLData = NULL;


extern BL_Data* UDS_Receive(void);

status_t Bootloader_Init(void)
{
    /* Receive BL_Data from UDS and store it globally */
    g_BLData = UDS_Receive();
    if (g_BLData == NULL)
    {
        return STATUS_ERROR;
    }
    
    /* Initialize the flash module */
    return BootloaderFlash_Init();
}

status_t Bootloader_Erase(void)
{
    if (g_BLData == NULL)
    {
        return STATUS_ERROR;
    }
    
    /* Use UDS data: mem_start_address and total_size to erase flash */
    return BootloaderFlash_Erase(g_BLData->mem_start_address, g_BLData->total_size);
}

status_t Bootloader_Program(void)
{
    if (g_BLData == NULL)
    {
        return STATUS_ERROR;
    }   
    
    return BootloaderFlash_Program(g_BLData->mem_start_address, g_BLData->total_size, g_BLData->data);
}

status_t Bootloader_MemoryCheck(void)
{
    if (g_BLData == NULL)
    {
        return STATUS_ERROR;
    }
    
    /* Compute the CRC32 over the flash area specified by mem_start_address and total_size */
    uint32_t computed_crc = BootloaderFlash_CalculateCRC32(g_BLData->mem_start_address, g_BLData->total_size);
        
    /* Compare the computed CRC with the expected CRC provided in the BL_Data structure */
    if (computed_crc == g_BLData->CRC_Field)
    {
        return STATUS_SUCCESS;
    }
    else
    {
        return STATUS_ERROR;
    }
}

/* Define the array of handler function pointers.
 * Order in the array is important and should match the service IDs used in UDS.
 * For example:
 *   index 0 -> Erase
 *   index 1 -> Program
 *   index 2 -> Memory Check
 */
BootloaderHandler_t g_BootloaderHandlers[] = {
    Bootloader_Erase,
    Bootloader_Program,
    Bootloader_MemoryCheck
};
